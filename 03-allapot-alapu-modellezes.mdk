Title         : Állapot alapú modellezés
.LogoMadoko   : after=" [A segédanyag forrása](https://github.com/FTSRG/remo/blob/gh-pages/03-allapot-alapu-modellezes.mdk)"

[INCLUDE="header.mdk"]

Az alábbi dokumentum egy háromfényű közúti jelzőlámpa fokozatosan kidolgozott modelljén keresztül mutatja be az állapot alapú modellezés alapfogalmait.

A bemutatott modellek a [Yakindu Statechart Tools][Yakindu] eszközzel készültek.

# Egyszerű állapotgépek

A példa kidolgozását azzal az egyszerű esettel kezdjük, amikor a modellező nyelv lényegében a _Digitális technika_ tárgyből megismert _Mealy-automata_ formalizmus.

## Állapottér

Ehhez első lépéseként meg kell határozni a rendszer _állapotterét_. Az állapottér elemeit _állapotoknak_ nevezzük. Az állapottérnek az alábbi két kritériumnak kell megfelelnie:

* _Teljesség_. Minden időpontban az állapottér legalább egy enema jellemzi a rendszert.

* _Kizárólagosság_. Minden időpontban az állapottér legfeljebb egy eleme jellemzi a rendszert.

Egy adott időpontban a rendszer _pillanatnyi állapota_ az állapottér azon egyetlen eleme, amelyik abban az időpontban jellemző a rendszerre. A rendszer egy _kezdőállapota_ olyan állapot, amely a vizsgálatunk kezdetekor (például a $t = 0$ időpillanatban) pillanatnyi állapot lehet.


~RemoExample
Kiindulásként a jelzőlámpa alábbi egyszerű állapotterével dolgozunk.

* ![tl_empty] _Off_: kikapcsolt állapot
* ![tl_red] _Stop_: vörös jelzés
* ![tl_redyellow] _Prepare_: vörös-sárga jelzés
* ![tl_green] _Go_: zöld jelzés
* ![tl_yellow] _Continue_: sárga jelzés

[compass_icon]: images/compass_icon.png "compass_icon" { width=auto max-width=90% }

Kezdetben a rendszer legyen kikapcsolva, vagyis a rendszer egyetlen kezdőállapota legyen _Off_.
~


## Állapotámenet, esemény

A rendszer időbeli viselkedésében kulcsfontosságú, hogy a pillanatnyi állapot hogyan változik az idővel. Bizonyos mérnöki diszciplínákban ez a változás folytonos függvénnyel jellemezhető (ilyen rendszerekkel a _Rendszerelmélet_ című tárgy foglalkozik részletesebben). Például egy repülő állapota lehet a tengerszint feletti magasság, amely egy időben folytonosan változó mennyiség. Azonban az informatikai gyakorlatban a _diszkrét állapottereknek_ van kiemelt jelentősége, ahol nem létezik folytonos átmenet az állapotok között, tehát a rendszer pillanatnyi állapota mindaddig állandó, amíg egy pillanatszerű esemény hatására egy másik állapotba át nem megy.

Az ilyen diszkrét rendszerek viselkedése _állapotátmenetekkel_ (más néven _tranzíciókkal_) jól modellezhető. Egy állapotátmenet megengedi, hogy a rendszer állapotot váltson egy forrás- és egy célállapot között. Amennyiben a rendszer pillanatnyi állapota a forrásállapot, az állapotátmenet _tüzelését_ követően a rendszer új állapota a célállapot lesz. (Az, hogy a tüzelés pillanatában a rendszer pillanatnyi állapota a forrás- vagy a célállapot-e, megállapodás kérdése.)

Egy állapotátmenet tüzelését egy adott _esemény_ bekövetkezte váltja ki. (Ennek speciális esete a spontán állapotátmenet, amikor a kiváltó esemény kívülről nem megfigyelhető.) Ezen felül állapotátmenetek _akciókat_ hajthatnak végre, például maguk is válhatnak ki eseményeket. Sokszor praktikus egy adott rendszer szempontjából input és output események elkülönítése.

~ RemoExample
Definiáljuk a jelzőlámpa modelljéhez az alábbi input eseményeket:

* _onOff_: ki-. és bekapcsolás kérése
* _switchPhase_: jelzésváltás kérése

A jelzőlámpa a működését a balesetek reprodukálását segítendő folyamatosan naplózza egy külső fekete dobozba. Ennek megfelelően legyenek a rendszer output eseményei a következők:

* _stop_: a rendszer sárga jelzésből vörös jelzésbe váltott
* _go_:  a rendszer zöld jelzésbe váltott

Az események definíciója a Yakindu szerkesztőjében a következőképpen adható meg:

```
interface:
  in event onOff
  in event switchPhase 
  out event stop
  out event go
```

Ekkor a jelzőlámpa modellezhető a [#trafficLight_1]. ábrán szemléltetett állapotgéppel:
~

~ RemoFigure { #trafficLight_1 caption="Jelzőlámpa egyzerű állapotgépe"}
![TrafficLight_1]
~

A diagrammon a rendszer állapotait (_Off_, _Stop_, _Prepare_, _Go_, _Continue_) lekerekített téglalapok jelölik. Az állapotgép kezdőállapotát (_Off_) a tömör fekete korongból húzott nyíl jelöli ki. A téglalapok között húzott nyilak a megfelelő állapotok közötti tranzíciókat jelképezik. A nyilakra írt címkék a tranzíciót kiváltó, illetve a kiváltott eseményekre hivatkoznak (Yakinduban az esemény kiváltását **`raise`** kulcsszó jelöli).

Amint azt a fenti definíciókból láthatjuk, az "állapot" kifejezés két különböző jelentéssel bír:

* _Szintaktikai jelentés_. Az állapotgráf egy csomópontja, melyet  lekerekített téglalap jelöl (_állapotcsomópont_).
* _Szemantikai jelentés_. Az állapottér egy eleme.

Egyszerű állapotgépek esetében elmondható, hogy a két fogalom által jelölt objektumok megfeleltethetőek egymásnak. Az állapotgép formalizmus új szintaktikai elemekkel történő kiterjesztésével (változók, összetett állapotok, ortogonális állapotok - ld. később) ugyanakkor ez a kapcsolat a továbbiakban nem áll fenn.



~ RemoExample

A Yakindu eszköz lehetőséget biztosít az állapotgép _szimulációjára_. Szimuláció során nyomon tudjuk követni, hogy a adott események hatására időben hogyan alakul a rendszer pillanatnyi állapota.

Például az _onOff_, majd _switchPhase_ események a szimulátor felületén történő kiváltását követően a rendszer _Prepare_ állapotba kerül, amit a Yakindu az állapotot jelképező téglalap átszínezésével ábrázol ([#trafficLight_1_sim]. ábra).
~

~ RemoFigure { #trafficLight_1_sim caption="Pillanatnyi állapot nyomonkövetése szimulációval"}
![TrafficLight_1_sim]
~

A fenti modell két fontos tulajdonsággal bír:

* _Determinisztikus_.
Az állapotgépnek legfeljebb egy kezdőállapota van, valamint bármely állapotban, bármely input esemény bekövetkeztekor legfeljebb egy tranzíció tüzelhet.

~ RemoRemark
A Yakindu csak determinisztikus modellek létrehozását támogatja.
~

* _Teljesen specifikált_.
Az állapotgépnek legalább egy kezdőállapota van, valamint bármely állapotban, bármely input esemény bekövetkeztekor legalább egy tranzíció tüzelhet.

~ RemoRemark
Ennek egyik következménye, hogy a rendszer _holtpontmentes_, azaz nem tartamaz olyan állapotot, amelyből nem vezet ki tranzíció.
~

## Végrehajtási szekvencia

A rendszer időbeli viselkedését annak _végrehajtási szekvenciái_ jellemzik. Egy végrehajtási szekvencia állapotok és események egy

~ Equation
  s_0 \xrightarrow{i_0 / o_0} s_1 \xrightarrow{i_1 / o_1} \ldots
~

(véges vagy végtelen) alternáló sorozata, ahol $s_0$ a rendszer egy kezdőállapota, $s_j \xrightarrow{i_j / o_j} s_{j+1}$ pedig a rendszer egy állapotátmenete minden $j$-re. Egy állapot _elérhető_, ha a rendszernek létezik véges végrehajtási szekvenciája az állapotba.


~RemoExample
Az

$\mathit{Off} \xrightarrow{\mathit{onOff}} \mathit{Stop} \xrightarrow{\mathit{switchPhase}} \mathit{Prepare} \xrightarrow{\mathit{switchPhase} / \mathit{go}} \mathit{Go}$

sorozat a jelző egy véges végrehajtási szekvenciája; ennek megfelelően biztosan tudjuk, hogy például a _Go_ állapot elérhető állapot. Az

$\mathit{Off} \xrightarrow{\mathit{onOff}} \mathit{Stop} \xrightarrow{\mathit{onOff}} \mathit{Off} \xrightarrow{\mathit{onOff}} \ldots$

egy végtelen végrehajtási szekvencia.
~


Az állapotgép végrehajtási szekvenciái vezérelten bejárhatóak szimuláció segítségével, ami jó módot ad az állapotgép ellenőrzésére. A Yakindu beépített szimulátora erre lehetőséget biztosít.


# Hierarchia

~RemoExample
Egészítsük ki a fenti modellt egy _reset_ input eseménnyel, melynek határása bekapcsolt állapotban a jelzőlámpa alphelyzetbe (_Stop_ állapotba) áll.

Az eddig megismert eszközökkel elkészített modellt szemlélteti a [#trafficLight_15]. ábra.
~

~ RemoFigure { #trafficLight_15 caption="Jelzőlámpa állapotgépe reset eseménnyel ![skull]"}
![TrafficLight_15]
~

Vegyük észre, hogy a rendszer a _reset_ eseményre a _Stop_, _Prepare_, _Go_ és _Continue_ állapotok mindegyikében egyformán viselkedik. Ebben az esetben ez annak köszönhető, hogy ezen állapotok mindegyikében a rendszer bekapcsolt állapotban van. Ezt a kapcsolatot a modellben explicit módon meg lehet jeleníteni egy _összetett állapot_ bevezetésével, amely a négy állapot közös tulajdonságait és vieselkedését általánosítja.


## Összetett állapot, állapotrégió


Egy összetett állapot szintaktikailag megfelel egy egyszerű állapotnak, azzal a kivétellel, hogy saját _régióval_ rendelkezik, mely további állapotokat (beleértve a kezdőállapotokat) és köztük tranzíciókat tartalmazhat. Régiók közül kiemelt jelentőséggel bír a legfelső szintű régió, mely magát az állapotgépet tartalmazza.

~ RemoExample
A [#trafficLight_2]. ábra szemlélteti az _On_ összetett állapot bevezezésével kapott modellt.

A teljes állapotgépet az _Operation_, míg az összetett állapot belsejét a _Phase_ régió tartalmazza. A _Phase_ régió kezdőállapota a _Stop_ állapot, így a régióba való belépéskor ez az állapot lesz a rendszer pillanatnyi állapota. A _reset_ esemény az _On_ állapotból _On_ állapotba vezet, így hatására valóban a _Stop_ állapot lesz aktív.
~

~ RemoFigure { #trafficLight_2 caption="Jelzőlámpa állapotgépe összetett állapottal"}
![TrafficLight_2]
~

~ RemoExample
A fenti példát szimulálva az _onOff_ esemény _Off_ állapotban történő fogadását követően az elvárásoknak megfelelően a _Stop_ állapot a rendszer pillanatnyi állapota lesz. Ugyanakkor a _Stop_ állapotot tartalmazó _On_ állapot is pillanatnyi állapot lesz ([#trafficLight_2_sim]. ábra).
~

~ RemoFigure { #trafficLight_2_sim caption="Hierarchikus állapot pillanatnyi állapotként"}
![TrafficLight_2_sim]
~

Általánosságban ha egy tartalmazott (egyszerű vagy összetett) állapot aktív, akkor az őt tartalmazó összetett állapot is aktív. Ezt fejezi ki az _állapotkonfiguráció_ fogalma, ami állapotok egy olyan maximális (azaz nem bővíthető) halmaza, melyek egyszerre lehetnek aktívak a rendszerben.


~ RemoExample
A jelzőlámpa állapotkonfigurációi:

* \{ _Off_ \}
* \{ _On_, _Stop_ \}
* \{ _On_, _Prepare_ \}
* \{ _On_, _Go_ \}
* \{ _On_, _Continue_ \}
~

Tartalmazó és tartalmazott állapot között tehát nem érvényesül a kizárólagosság. Ennek megfelelően a hierarchikus állapot bevezetésével többféle érvényes állapottéró adódik.

~ RemoExample
A jelzőlámpa érvényes állapotterei:

* \{ _Off_, _On_ \}
* \{ _Off_, _Stop_, _Prepare_, _Go_, _Continue_ \}

Ezen felül az állapotkonfigurációk halmaza is tekinthető állapottérnek:

* \{ \{ _Off_ \}, \{ _On_, _Stop_ \}, \{ _On_, _Prepare_ \}, \{ _On_, _Go_ \}, \{ _On_, _Continue_ \} \}

Ugyanakkor az \{ _Off_, _On_, _Stop_, _Prepare_, _Go_, _Continue_ \} nem jó állapottér, hiszen ebben az esetben például az \{ _On_, _Prepare_ \} részhalmaz sérti a kizárólagosságot. Általános szabály, hogy egy állapottér vagy az összetett állapotot, vagy annak összes részállapotát tartalmazza, de nem mindkét változatot.

~

A \{ _Stop_, _Prepare_, _Go_, _Continue_ \} részállapottér az _On_ állapotot _finomítja_, míg az _On_ állapot a \{ _Stop_, _Prepare_, _Go_, _Continue_ \} állapotokat _absztrahálja_. Jó modellezési gyakorlat a modell állapotainak fokozatos finomítása.

## Többszintű állapothierarchia

Amint a következő példából kiderül, az állapotok közötti hierarchia nem feltétlenül egyszintű.

~RemoExample
A [#trafficLight_3]. ábrán szemléltetett modell az _On_ állapotot tovább bővíti egy _Alert_ állapottal,
mely a jelző sárgán villogó, figylemeztető állapotát modellezi.
A rendes üzem jelzéseit a _Normal_ összetett állapot tartalmazza.
A _Normal_ és _Alert_ állapotok közötti váltás a _switchMode_ input esemény hatására történik,
a $\mathit{Normal} \rightarrow \mathit{Alert}$ állapotváltás _alert_ output eseményt vált ki.
~

~ RemoFigure { #trafficLight_3 caption="Jelzőlámpa állapotgépe többszintű összetett állapottal"}
![TrafficLight_3]
~

# Változók és őrfeltételek

Finomítsuk az _Alert_ állapotot _LightOn_ és _LightOff_ alállapotokkal, melyek fél másodpercenként váltakozva a sárga fény villogását modellezik!
A villogás modellezéséhez feltételezzünk egy _tick_ bejövő eseményt, amely a specifikáció szerint egy 8 Hz frekvenciájú órajel, tehát egyenletes ütemben, másodpercenként nyolcszor jelez.

Ahhoz, hogy a 2 Hz-es váltakozást modellezzük, a _tick_ esemény minden negyedik bekövetkeztekor kell váltani _LightOn_ és _LightOff_ között. Ezért az állapotokat tovább kell finomítanunk, hogy a bekövetkező órajeleket számolni tudjuk.

Egy lehetséges megvalósítást szemléltet az [#trafficLight_35]. ábra.

~ RemoFigure { #trafficLight_35 caption="Villogó jelzés külső órával ![skull]"}
  ![TrafficLight_35]
~

A fenti állapotgép valóban a kívánt viselkedést modellezi: az állapotgép _Alert_ állapotban pontosan minden negyedik _tick_ eseményre vált _LightOn_ és _LightOff_ állapotok között.

Abban az esetben azonban, ha csak minden századik eseményre kellene váltani _LightOn_ és _LightOff_ között, mindkét összetett állapot száz alállapotot tartalmazna. Látható tehát, hogy ez nem lesz jó modellezési gyakorlat, hiszen az így bemutatott modell elkészítése nagy erőfeszítést igényel, sok hibalehetőséget rejt és nehezen átlátható; valamint a számszerű paraméterek megváltozása esetén jelentős módosítást igényel.

## Belső változók

A probléma megoldható _változók_ alkalmazásával. A változó típussal rendelkezik, ez Yakinduban lehet _boolean_, _integer_, _real_ vagy _string_, ezek a programozási nyelveknél megszokott logikai, egész, lebegőpontos, illetve karakterlánc típusoknak felelnek meg. Változók jelenlétében a rendszer állapotát már nemcsak a vezérlés állapota (állapot csomópontok), hanem az éppen érvényes _változóértékelés_ is meghatározza.


~ RemoExample
A bekövetkezett _tick_ események számlálására a rendszer interfészdefinícióját kiegészítjük a _counter_ egész típusú változóval:
```
var counter : integer
```
~

A változó értékét _utasítással_ lehet módosítani, amely - az eseménykiváltáshoz hasonlóan - tranzícióhoz kapcsolható _akció_. Akció ezen felül kapcsolható állapothoz is az _entry_ és _exit_ triggerek segítségével, melyek az állapotba való belépéskor, illetve az állapotból történő kilépéskor aktiválódnak.

Azt, hogy a változó aktuális értéke befolyással lehessen a vezérlésre, a tranzíciókra felírt őrfeltételekkel lehet megvalósítani. Az őrfeltétel biztosítja, hogy a tranzíció csak akkor tüzelhessen, ha az őrfeltételbe felírt logikai kifejezést az aktuális állapot változóértékelése kielégíti.

~RemoExample
A _tick_ események számlálása változóval megvalósítható a [#trafficLight_4]. ábrán bemutatott állapotgép szerint. Figyeljük meg, hogy a változó értékét szögletes zárójelekbe tett őrfeltételek használják.
~

~ RemoFigure { #trafficLight_4 caption="Villogó jelzés számlálóval"}
  ![TrafficLight_4]
~

~RemoExample
A fenti rendszer egy végrehajtásiszekvencia-részlete:

$\langle \mathit{LightOn}, \{ \mathit{counter} \mapsto 0 \} \rangle \xrightarrow{\mathit{tick}}$ \
$\langle \mathit{LightOn}, \{ \mathit{counter} \mapsto 1 \} \rangle \xrightarrow{\mathit{tick}}$ \
$\langle \mathit{LightOn}, \{ \mathit{counter} \mapsto 2 \} \rangle \xrightarrow{\mathit{tick}}$ \
$\langle \mathit{LightOn}, \{ \mathit{counter} \mapsto 3 \} \rangle \xrightarrow{\mathit{tick}}$ \
$\langle \mathit{LightOff}, \{ \mathit{counter} \mapsto 0 \} \rangle$
~

~RemoExercise
Hogyan módosul őrfeltételek jelenlétében a _determinizmus_ definíciója?
~

## Interfészváltozók

A vörös, sárga ill. zöld színű fények állapotának nyilvántartására felvesszük _red_, _yellow_ és _green_ logikai változókat. A korábban bevezetett _counter_ változóval ellentétben ezek a változók nem csak az állapotgéppel leírt vezérlő belső működésében játszanak szerepet; úgy tekintjük, hogy a különböző színű fények villanyégőit közvetlenül ezek az _interfészváltozók_ kapcsolják. Általánosságban a be- és kimeneti események mellett interfészváltozókon keresztül kommunikálhat az állapotgép a külvilággal. 

Mivel a vezérlési állapotokat úgy vettük fel, hogy egyértelműen meghatározzák a fényeket leíró változók értékét, ezen változóknak értéket adó utasításokat _entry_ triggerhez rendeljük - ez egy tömör jelölése annak, hogy az adott állapotba lépő összes állapotátmenet végrehajtson egy adott akciót.

A bővített állapotgépet a [#trafficLight_5]. ábra szemlélteti.

~ RemoFigure { #trafficLight_5 caption="Fények állapotának modellezése változókkal"}
![TrafficLight_5]
~

# Időzítés

A modell időbeli viselkedését eddig egy külső óra által szolgáltatott, megszabott frekvenciájú órajelet feltételezve modelleztük. A Yakindu azonban lehetőséget biztosít időzített események explicit modellezésére az _after_ kulcsszóval. Ezen felül az _after_ és _every_ trigger használatával időzített esemény állapothoz is rendelhető.

Az időzítés explicit modellezésével a modell tömörebb, kifejezőbb lehet, és a későbbi tényleges technikai megvalósítás apró részleteitől (órajel frekvenciája) függetlenül érvényes. 

Az időzítést használó modellt a [#trafficLight_6]. ábra szemlélteti.

~ RemoFigure { #trafficLight_6 caption="Villogó jelzés időzítéssel"}
![TrafficLight_6]
~


# Ortogonális dekompozíció

Bővítsük a modellt [járműérzékelő][Induction-Loop] funkcióval!

~ RemoExample
A jelzőlámpa (bekapcsolt állapotban) periodikus _trafficPresent_ és _trafficAbsent_ input események fogadásával értesül arról, hogy tartózkodik-e jármű a lámpa előtti útszakaszon. A jelző ezt az információt a _queue_ logikai változóban tárolja (ennek értéke kezdetben $\mathsf{true}$). A foglaltság nyilvántartásának értelme, hogy ilyenkor csak akkor kell _Stop_ állapotból _switchPhase_ esemény hatására jelzést váltani, ha van a lámpa előtt várakozó jármű, vagyis $\mathit{queue} = \mathsf{true}$.

A járműérzékelő jeleinek fogadását a [#trafficLight_7_Detect]. ábrán szemléltetett állapotgép valósítja meg.
~

~ RemoFigure { #trafficLight_7_Detect caption="Járműérzékelő funkció állapotgépe"}
![TrafficLight_7_Detect]
~


## Állapotgépek szorzata

Gondoljuk végig, hogyan lehet a fenti _Detect_ régió viselkedését kombinálni a már meglévő modellel! Mivel a foglalátságérzékelés _On_ állapotba lépve kezd működni, így elég a meglévő modell _Control_ régióra koncentrálni. Ekkor az eredeti modell pillanatnyi állapota _Stop_. Ahhoz, hogy a bővített modellben ilyenkor mind a _switchPhase_, mind a _trafficAbsent_ és _trafficPresent_ eseményeket megfelelően kezelni tudjuk, szükséges egy _Stop\_Present_ kezdőállapot és egy _Stop\_Absent_ állapot felvétele. Ugyanebből az okból kifolyólag szükséges a _Prepare_, _Go_, _Continue_, _LightOn_ és _LightOff_ állapotok megkettőzése, valamint a származtatott állapotok között a két működésnek megfelelő tranzíciók felvétele.

A fent vázolt művelet az állapotgépeken értelmezett _aszinkron szorzás_, melynek eredményét _szorzatautomatának_ is nevezik. Jól látható, hogy a szorzatautomata vonatkozó régiójában az állapotok száma a két összeszorzott régió (egyszerű) állapotai számának szorzata (innen a név). Könnyen végiggondolható, hogy ha öt állapotgép együttes működését vizsgálnánk, amelyeknek külön-külön négy állapota van, akkor $4^5=1024$ állapota lenne a szorzatautomatának. Ebből kifolyólag ez a megközelítés egymástól nagyban független viselkedések modellezésére nem szerencsés, hiszen kezelhetetlenül nagy méretű modellekhez vezet (ún. _állapottér-robbanás_ jelensége).

## Ortogonális állapot

Ilyen esetekben alkalmazható eszköz az _ortogonális állapot_. Az ortogonális állapot egy olyan összetett állapot, mely több régióval rendelkezik. Az ortogonális állapot régiói _ortogonális régiók_, melyek - az egyrégiós összetett állapottal megegyező módon - akkor aktívak, ha a tartalmazó állapot aktív.

Az így elkészített állapotgépet a [#trafficLight_7]. ábra szemlélteti.

~ RemoFigure { #trafficLight_7 caption="Járműérzékelős jelzőlámpa állapotgépe ortogonális állapottal"}
![TrafficLight_7]
~

Szemantikailag az ortogonális régiók _aszinkron_ módon működnek, a tranzíciók külön-külön tüzelnek, szemben a _szinkron_ működéssel, amikor egy adott esemény bekövetkeztekor az ortogonális régiók tranzíciói egyszerre tüzelnek. Fontos, hogy az ortogonális régiók különböző eseményeket dolgozzanak fel, különben _versenyhelyzet_ alakulhat ki. A működés összhangolása történhet például megosztott változókon keresztül; egyéb módszerek is léteznek (pl. belső események mentén történő szinkronizálás), amelyekkel itt nem foglalkozunk. 

~ RemoExample
A fenti rendszert szimulálva, majd az (_onOff_, _switchPhase_, _trafficAbsent_) eseményeket sorrendben kiváltva a rendszer a [#trafficLight_7_sim]. ábrán látható állapotkonfigurációba kerül. Vegyük észre, hogy az aktív ortogonális állapot (_On_) mindkét ortogonális régiójában (_Control_, _Detect_) pontosan egy közvetlenül tartalmazott állapot aktív.
~

~ RemoFigure { #trafficLight_7_sim caption="Ortogonális állapot aktuális állapotként"}
![TrafficLight_7_sim]
~

Ortogonális állapotok bevezetésével az állapotkonfiguráció fogalma is összetettebbé válik. Ilyen esetben ugyanis minden időpillanatban, amikor egy ortogonális állapot aktív, minden régiójának pontosan egy állapota aktív (az egy ortogonális állapothoz tartozó régiók között tehát nem érvényesül a kizárólagosság).

~ RemoExample
A rendszer állapotkonfigurációi:

* \{ _Off_ \}
* \{ _On_, _Normal_, _Stop_, _Present_ \}
* \{ _On_, _Normal_, _Prepare_, _Present_ \}
* \{ _On_, _Normal_, _Go_, _Present_ \}
* \{ _On_, _Normal_, _Continue_, _Present_ \}
* \{ _On_, _Normal_, _Stop_, _Absent_ \}
* \{ _On_, _Normal_, _Prepare_, _Absent_ \}
* \{ _On_, _Normal_, _Go_, _Absent_ \}
* \{ _On_, _Normal_, _Continue_, _Absent_ \}
* \{ _On_, _Alert_, _LightOn_, _Present_ \}
* \{ _On_, _Alert_, _LightOff_, _Present_ \}
* \{ _On_, _Alert_, _LightOn_, _Absent_ \}
* \{ _On_, _Alert_, _LightOff_, _Absent_ \}
~



~ RemoExample
A fentieknek megfelelően az állapotkonfigurációk halmaza tekinthető a változókat elabsztraháló állapottérnek. Ha azonban a változókon kívül a forgalomszámláló működését is elabsztraháljuk, akkor arra jutunk, hogy a már ismerős

* \{ _Off_, _Stop_, _Prepare_, _Go_, _Continue_, _LightOn_, _LightOff_ \}

halmaz továbbra is egy érvényes állapottere a rendszernek. Természetesen az is egy érvényes absztrakció, ha a _Control_ régió állapotait absztraháljuk el; ilyenkor az

* \{ _Off_, _Present_, _Absent_ \}

halmaz adódik állapottérnek.
~

~RemoExercise
Gondoljuk végig, hogy a szorzatautomata ill. szorzat-állapottér fogalmaknak mi köze van a matematikából ismert Descartes-szorzat művelethez!
~

~ RemoExercise
  Miért nem a _Stop_ állapot alállapotaiként vettük fel a járműérzékelő funkcionalitást?
~

# A végső modell

Utolsó lépésként a különböző eseményeket és változókat _interface_-ekbe rendezzük. Ennek a csoportosításnak az az elsődleges szerepe, hogy elkülönítsük egymástól az eltérő külső rendszerekhez kapcsolódó elemeket; így pl. a forgalomdetektor megvalósításakor kizárólag a _Detector_ interfészt kell figyelembe venni, a többi interfész részleteivel nem kell megismerkedni, azok esetleges áttervezését nem kell nyomon követni. Speciális esetként megjelenik a kizárólag belső használatú _queue_ változó, amely egyik külső interfésznek sem része, így külső rendszerekkel nem lesz közvetlen érintkezésben. (Yakinduban az ilyen változókat és eseményeket a speciális **`internal`** interfész tartalmazza.)  

~ RemoExample
Az interfészdefiníciók Yakinduban a következőképpen alakulnak:

```
interface Controller:
  in event onOff
  in event reset
  in event switchPhase
  in event switchMode

interface Detector:
  in event trafficPresent
  in event trafficAbsent 

interface Recorder:
  out event stop
  out event go
  out event alert

interface Light:
  var red : boolean
  var yellow : boolean
  var green : boolean
  
internal:
  var queue : boolean
```
~

Mivel a különböző interfészeknek lehetne azonos nevű eseménye ill. állapotváltozója, ezért Yakinduban mindig az interfész megadásával kell hivatkozni a változókra és eseményekre. A módosított modellt szemlélteti a [#trafficLight_8]. ábra.

~ RemoFigure { #trafficLight_8 caption="A jelzőlámpa modellje interface-ekkel"}
  ![TrafficLight_8]
~

<!--
# Összefoglalás

[absztrakt modellek szerepe, nemdeterminizmus, állapotmentes vs. állapotos, stb.]{ color=red }
-->

# Ajánlott irodalom {-}

* Az állapottérkép modellezési módszer kidolgozása [@Harel87:1; @Harel09]
* Az állapottérkép modell az UML-ben [@UML]
* Állapottérkép modellek értelmezése (modellszemantika) [@Latella99; @Dubrovin08; @Harel87:2]
* Állapottérkép alapú forráskód generálás [@Practical; @Pinter07]
* UML állapottérképek használata biztonságkritikus rendszerekben [@Pap06; @Knight97; @Noble96; @Sohn00]

# Hivatkozások {-}

[BIB]

[Yakindu]: http://statecharts.org
[Yakindu-Doc]: http://statecharts.org/documentation.html
[Induction-Loop]: https://en.wikipedia.org/wiki/Induction_loop#Vehicle_detection

[skull]: images/skull.png "skull" { width=auto vertical-align=middle }

[tl_red]: images/tl_red.svg "tl_red" { width=8px vertical-align=middle }
[tl_redyellow]: images/tl_redyellow.svg "tl_redyellow" { width=8px vertical-align=middle }
[tl_green]: images/tl_green.svg "tl_green" { width=8px vertical-align=middle }
[tl_yellow]: images/tl_yellow.svg "tl_yellow" { width=8px vertical-align=middle }
[tl_empty]: images/tl_empty.svg "tl_empty" { width=8px vertical-align=middle }

[TrafficLight_1]: images/TrafficLight_1.svg "TrafficLight_1" { width=auto }
[TrafficLight_1_sim]: images/TrafficLight_1_sim.svg "TrafficLight_1_sim" { width=auto }
[TrafficLight_15]: images/TrafficLight_15.svg "TrafficLight_15" { width=auto }
[TrafficLight_2]: images/TrafficLight_2.svg "TrafficLight_2" { width=auto }
[TrafficLight_2_sim]: images/TrafficLight_2_sim.svg "TrafficLight_2_sim" { width=auto }
[TrafficLight_3]: images/TrafficLight_3.svg "TrafficLight_3" { width=auto }
[TrafficLight_35]: images/TrafficLight_35.svg "TrafficLight_35" { width=auto }
[TrafficLight_4]: images/TrafficLight_4.svg "TrafficLight_4" { width=auto }
[TrafficLight_5]: images/TrafficLight_5.svg "TrafficLight_5" { width=auto }
[TrafficLight_6]: images/TrafficLight_6.svg "TrafficLight_6" { width=auto }
[TrafficLight_7_Detect]: images/TrafficLight_7_Detect.svg "TrafficLight_7_Detect" { width=auto }
[TrafficLight_7]: images/TrafficLight_7.svg "TrafficLight_7" { width=auto }
[TrafficLight_7_sim]: images/TrafficLight_7_sim.svg "TrafficLight_7_sim" { width=auto }
[TrafficLight_8]: images/TrafficLight_8.svg "TrafficLight_8" { width=auto }

