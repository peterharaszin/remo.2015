Title         : Struktúra alapú modellezés
.LogoMadoko   : after=" [A segédanyag forrása](https://github.com/FTSRG/remo/blob/gh-pages/02-struktura-alapu-modellezes.mdk)"

[INCLUDE="header.mdk"]

# Bevezetés

A modellezés során egy rendszert jellemezhetünk annak statikus, ill. dinamikus jellemzői alapján. A statikus jellemzés esetén a rendszer felépítését, *struktúráját* írjuk le, míg dinamikus jellemzés esetén a rendszer *viselkedésével* foglalkozunk.

Jelene anyag témája a *struktúra alapú modellezés*. Célja, hogy bemutatassa a strukturális modellezés matematikai alapjait, a hierarchikus modellezés ötletét stb.

# Strukturális modell

~ RemoDef
A *strukturális modell* a rendszer felépítésére vonatkozó tudás.
~

A strukturális modell alkalmas arra, hogy az alábbi kérdéseikre nyújtson valamilyen (nem feltétlenül kimerítő) választ:

* Milyen elemekből áll a rendszer?
* Hogyan kapcsolódnak egymáshoz az elemek?
* Milyen tulajdonságúak az elemek?

Egy rendszer strukturális modellje a rendszer dekompozíciójával állítható elő.

~ RemoDef
A dekompozíció ("faktoring") egy összetett probléma vagy rendszer kisebb részekre bontása, amelyek könnyebben érthetők, fejleszthetők és karbantarthatók.
~

Természetesen a dekompozíció során ügyelnünk kell arra, hogy az egyes részekből visszaállítható legyen az eredeti rendszer, különben a kapott strukturális modellünk hiányos.

~ RemoDef
Egy dekompozíció *helyes*, ha a dekompozícióval kapott rendszer minden elemének megfeleltethető az eredeti rendszer valamelyik eleme, és az eredeti rendszer minden eleméhez hozzárendelhető a dekompozícióval kapott rendszer egy vagy több eleme. 
~

~ RemoDef
*Top-down* modellezés során a rendszert felülről lefelé építjük. A modellezés alaplépése a *dekompozíció*.
~

A top-down modellezés jellemzői:

* `+` Részrendszer tervezésekor a szerepe már ismert
* `−` „Félidőben” még nincsenek működő részek
* `−` Részek problémái, igényei későn derülnek ki

~ RemoDef
*Bottom-up* modellezés során a rendszert alulról felfelé építjük. A modellezés alaplépése a *kompozíció*.
~

A bottom-up modellezés jellemzői:

* `+` Alrendszer önmagában kipróbálható, tesztelhető
* `+` Részleges készültségnél is összeépíthető valami
* `−` Nem látszik előre a rész szerepe az egészben

# Fogalmak

Az alábbiakban összefoglaljuk a szükséges fogalmakat és definíciókat. Nem mindenhol célunk a teljes matematikai precizitás, ill. az egyes fogalmakhoz tartozó különböző definíciók felsorolása (pl. a *gráf* fogalomra sok különböző, némileg eltérő jelentésű definíció létezik).

## Gráf

~ RemoDef
A *gráf* egy olyan $G = (V, E)$ struktúra, ahol $V$ halmaz a csomópontok, $E$ az élek halmaza. Az élek csomópontok között futnak, *irányítatatlan gráf* esetén $E$ csomópontok rendezetlen $\{v_1, v_2\}$ párjaiból áll (tehát nem különböztetjük meg a $\{v_1, v_2\}$ és a $\{v_2, v_1\}$) párokat, míg *irányított gráf* esetén csomópontok rendezett $(v_1, v_2)$ párjaiból.
~

Bár a *gráf* meglehetősen egyszerű fogalom, rendkívül sok szakterület modelljei jól ábrázolhatók benne. Ennek egyik fő oka, hogy az emberek gondolkodás közben a világot gyakran úgy írják le, mint "dolgok" (csomópontok), amelyek egymással valamilyen "viszonyban" vannak (élek).

~ RemoExample
Irányítatlan gráffal ábrázolhatjuk emberek között az *ismerőse* relációt, ilyen pl. a Facebook *friendship* relációja.
~

~ RemoExample
Irányított gráffal ábrázolhatjuk emberek között a *követi* relációt, ilyen pl. a Twitter *follow* relációja. Szintén irányított gráffal ábrázolhatók az interneten egymásra mutató weboldalak.
~

Természetesen irányítatlan gráfok ábrázolhatók irányítottként is, ha minden $\{v_1, v_2\}$ irányítatlan élet lecserélünk. (Érdekesség: megfelelő transzformációval irányított gráfok is ábrázolhatók irányítatlan gráfként [@rodriguez2008mapping].)

Gyakran nincs szükségünk a teljes gráfra.

~ RemoDef
Egy $G = (V, E)$ gráfnak $G' = (V', E')$ *részgráfja*, ha $G'$ megkapható úgy, hogy $G$-ből elhagyunk néhány csomópontot és azok éleit, ill. néhány további élet. Formálsan: ha $V' \subseteq V$ és $E' \subseteq V' \times V'$. 
~

### Gráftípusok

Tulajdonságaik alapján többféle gráftípust különböztethetünk meg, pl. a *teljes*, a *páros*, a *perfekt*, az *intervallum-* és a *síkbarajzolgató* gráfok. Ezekkel bővebben a *Bevezetés a számításelméletbe 2.* tantárgy foglalkozik.

A strukturális modellezés szempontjából kiemelt szerepet játszanak a *fa* gráfok.

~ RemoDef
A körmentes, összefüggő gráfokat *fának* nevezzük.
~

~ RemoDef
A körmentes gráfokat *erdőnek* nevezzük.
~

Az *erdő* gráfot egyes források *ligetnek* nevezik.

A fák esetén gyakran kiemelt szerepet tulajdonítunk egy csomópontnak.

~ RemoDef
*Gyökér csomópont:* a fa egy megkülönböztetett csomópontja.
~

~ RemoDef
*Gyökeres fa:* olyan fa, ami rendelkezik gyökér csomóponttal.
~

~ RemoDef
*Gyökeres, szintezett fa:* a fa csomópontjaihoz hozzárendeljük a gyökértől vett távolságukat.
~

### Navigáció gráfokban

Irányított és irányítatlan gráfokban is gyakran szükség van arra, hogy az egyes élek mentén "lépkedjünk".

~ RemoDef
*Séta:* szomszédos csúcsok és élek váltakozó sorozata.
~

~ RemoDef
*Út:* olyan séta, amely nem metszi önmagát, valamint első és utolsó csúcsa különbözik.
~

~ RemoDef
*Kör:* olyan séta, amely nem metszi önmagát, valamint első és utolsó csúcsa megegyezik.
~

### Kiterjesztések

A gráf adatmodellnek többféle kiterjesztése is létezik. Ezek közül az alábbiak ismeretére építünk:

* *Címkézett gráf*: a gráf elemeit (csomópontjait és/vagy éleit) *címkékkel* láthatjuk el. A címkézés célja lehet *egyedi azonosító* hozzárendelése vagy bizonyos tulajdonság leírása (pl. csomópontok kapacitása, élek típusa).
  * *Csúcscímkézett gráf:* az egyes csomópontokat címkézzük.
  * *Élcímkézett gráf:* az egyes (irányított vagy irányítatlan) éleket címkézzük.
* *Típusos gráfok*: a gráf elemei *típusokkal* rendelkeznek. A típusos gráfok a *címkézett gráfok* speciális esetei.
* *Tulajdonsággráf:* az egyes csomópontokat és éleket tulajdonságokkal látjuk el. A tulajdonságok kulcs-érték párok, pl. "neve = Gipsz Jakab", "életkora = 20", "színe = zöld".

További kiterjesztések:

* *Súlyozott gráfok*: a gráf elemeit (csomópontjait és/vagy éleit) súlyokkal látjuk el, pl. kapacitást vagy költséget rendelünk hozzájuk. A *súlyozott gráfok* a címkézett gráfok speciális esetei.
* *Multigráfok:* a csomópontok között *többszörös élek* is futhatnak.
* *Hipergráfok:* egy él több csomópont között is futhat. A hipergráf éleit *hiperéleknek* nevezzük.

### Műveletek gráfokon

#### Elérhetőségvizsgálat

Egy $v_i$ csomópontból egy $v_j$ csomópont elérhető, ha létezik $v_i$-ből $v_j$-be irányított út.

Ez elérhetőségvizsgálatra gyakran elemi bejáróalgoritmusokat használunk:

* Szélességi bejárás (BFS)
* Mélységi bejárás (DFS)

#### Útkereső algoritmusok

* Dijsktra-algoritmus
* A* keresés
* Bellman--Ford algoritmus
* Floyd algoritmus

A legrövidebb út keresése kipróbálható az alábbi példán: <http://gist.neo4j.org/?6d2a1a1c6325043d09a0>.

#### Transzformációk

* *Szűrés éltípusra:* gyakran csak bizonyos éltípus(ok)ra van szükségünk. Egy $G = (V, E)$ gráf adott $c_1, \dots, c_n$ élcímkékre szűrt részgráfja $G' = (V, E)$, ahol $V$ a csomópontok változatlan halmaza, míg $E'$ azon $e$ élek halmaza, ahol $e$ címkéje eleme a $c_1, \dots, c_n$ halmaznak.

# Tulajdonságmodellezés

Egy modellelem (gráfok esetén tipikusan a modell csomópontjai) tulajdonságait *jellemzőkkel* vagy más néven *attribútumokkal* jellemezzük. Különböző modellelemekre az egyes jellemzők más-más vehetnek fel (de nem szükségszerűen térnek el).

A jellemzők között gyakran kitüntetünk egyet:

~ RemoDef
A *típus* egy kitüntetett jellemző, amely tipikusan állandó egy modellelem életciklusa során. A többi jellemzőt *tulajdonságnak* hívjuk.
~

Azonos *típussal* rendelkező modellelemek *közös tulajdonságokkal* bírnak.

## Táblázatos ábrázolás 

A tulajdonságokat gyakran ábrázoljuk táblázatos formában, ún. *relációkban*. A reláció pontos halmazelméleti definíciójával és a relációkon értelmezett műveleteket definiáló relációalgebrával bővebben a 3. féléves *Adatbázisok* c. tárgy foglalkozik. Most egy egyszerűbb, kevésbé formális definíció alkalmazunk:

~ RemoDef
A *reláció* (*táblázat*) a modellelemeket és azok jellemzőit tárolja. A táblázat egy sora a modell egy elemének, egy oszlopa egy jellemzőjének felel meg.
~

Példaként használjuk az alábbi táblázatot!

+----------------+----------------+--------+--------------+---------------+
| név            | fénykard színe | nem    | holdak száma | keringési idő |
+----------------+----------------+--------+--------------+---------------+
| Alderaan       |                |        | 1            | 364           |
| Coruscant      |                |        | 4            | 368           |
| Darth Vader    | piros          | férfi  |              |               |
| Jabba          |                | hímnős |              |               |
| Leia Organa    |                | nő     |              |               |
| Luke Skywalker | zöld           | férfi  |              |               |
| Mace Windu     | lila           | férfi  |              |               |
| Tatooine       |                |        | 3            | 304           |
| Yoda           | zöld           | férfi  |              |               |
+----------------+----------------+--------+--------------+---------------+

Látható, hogy a táblázatnak nem minden celláját töltöttük ki. Ezeket a cellákat gyakran az *NA* (not applicable, not available) rövidítéssel vagy (különösen az adatbázisokban) *null* értékkel jellemezzük.

### Műveletek

A relációkon most két alapműveletet definiálunk, ezek a *szűrés* (relációalgebrában *szelekció*) és a *vetítés* (relációalgebrában *projekció*). Ezekkel a műveletekkel a modellünknek egy-egy nézetét állíthatjuk elő.

#### Szűrt nézet

Szűrés során egy feltétel mentén bizonyos sorokat elhagyunk a relációból:

Szűrés a `fénykard színe = "zöld"` feltételre:

+----------------+----------------+-------+--------------+---------------+
| név            | fénykard színe | nem   | holdak száma | keringési idő |
+----------------+----------------+-------+--------------+---------------+
| Luke Skywalker | zöld           | férfi |              |               |
| Yoda           | zöld           | férfi |              |               |
+----------------+----------------+-------+--------------+---------------+

Szűrés a `holdak száma > 2` feltételre:

+-----------+----------------+-----+--------------+---------------+
| név       | fénykard színe | nem | holdak száma | keringési idő |
+-----------+----------------+-----+--------------+---------------+
| Coruscant |                |     | 4            | 368           |
| Tatooine  |                |     | 3            | 304           |
+-----------+----------------+-----+--------------+---------------+

#### Vetített nézet

Vetítés során a modell egyes jellemzőit elhagyjuk a relációból. Fontos, hogy az esetleg létrejövő üres sorokat is elhagyjuk.

Vetítés a `{holdak száma, keringési idő}` jellemzőkre.

+--------------+---------------+
| holdak száma | keringési idő |
+--------------+---------------+
| 1            | 364           |
| 4            | 368           |
| 3            | 304           |
+--------------+---------------+

Vetítés a `{név, fénykard színe}` jellemzőkre.

+----------------+----------------+
| név            | fénykard színe |
+----------------+----------------+
| Alderaan       |                |
| Coruscant      |                |
| Darth Vader    | piros          |
| Jabba          |                |
| Leia Organa    |                |
| Luke Skywalker | zöld           |
| Mace Windu     | lila           |
| Tatooine       |                |
| Yoda           | zöld           |
+----------------+----------------+

## Típusgráf

~ RemoDef
A *típusgráf* egy olyan gráf, amelyben minden csomóponttípushoz egy típuscsomópont, minden éltípushoz egy típusél tartozik.
~

Az elsőre talán furcsának ható definíció tulajdonképpen egy egyszerű fogalmat vezet be: a típusgráfban a csomópontok olyan típusokat jelölnek, amit a példánygráfban csomópont vehet fel (pl. "person", "warrior", "planet"), az ezek között futó élek pedig olyan típusokat, amiket a példánygráfban (adott típusú csomópontok között futó élek) vehetnek fel. Példa: ld. diasor, Star Wars szereplők, bolygók és kapcsolataik.

A típusgráf egy rendszer *metamodelljének* típusait és kapcsolatait ábrázolja.

A típusgráfot és példánygráfot egy gráfon ábrázolva a típus-példány viszonyok is megjeleníthetők: a példánygráf csomópontjaiból (pl. "Mace Windu") a típusgráf csomópontjaira (pl. "Jedi") *instance of* ("példánya") élek mutatnak. Szintén *instance of* viszony áll fenn a példánygráf élei és a típusgráf élei között -- ennek ábrázolása azonban gráfként nehézkes.

Az *instance of* ("példánya") viszony helyett/mellett megjeleníthető annak inverze, a *type of* ("típusa") viszony is. Gráfban ábrázolva az *instance of* és *type of* élek adott csomópontok között egymással ellentétes irányúak: pl. *"Mace Windu" instance of "Jedi"* és *"Jedi" type of "Mace Windu"*.

# Kitekintés

Az alábbiakban bemutatunk néhány, a strukturális modellezés témaköréhez kapcsolódó gyakorlati technológiát, specifikációt és eszközt. Az itt felsorolt fogalmak nem részei a számonkérésnek -- viszont gyakran előkerülnek a későbbi tanulmányok és munka során, ezért mindenképpen érdemes legalább névről ismerni őket.

## Modellezési nyelvek

### UML (Unified Modeling Language)

Az UML egy általános célú modellezési nyelv az [@UML]. Az UML három fő diagramtípust definiál:

* *Structure Diagram:* strukturális modellek leírására. A *Class Diagram* az osztályok (metamodell), míg az *Object diagram* a példányok (modell) leíárásra alkalmas. A *Composite Structure Diagram* egy rendszer struktúráját és a rendszer komponenseinek kapcsolatát mutatja be.
* *Behaviour Diagram:* viselkedési modellek leírására, pl. a *State Machine Diagram* segítségével állapotgépekm az *Activity Diagramon* folyamatok ábrázolhatók.
* *Interaction Diagram:* a *Behaviour Diagram* altípusa. Ennek megfelelően szintén a viselkedés leírása a célja, de a hangsúly a vezérlés- és adatáramlás bemutatásán van. Ilyen pl. a *Sequence Diagram* (szekvenciadiagram), amely az egyes objektumok közötti interakciót mutatja be üzenetek formájában.

~ RemoFigure { #Uml_diagram2 caption="Az UML diagramjai egy UML osztálydiagramon ábrázolva" }
![Uml_diagram2]
~

[Uml_diagram2]: images/Uml_diagram2.png "Uml_diagram2" { width=auto max-width=90% }

Az UML nyelvvel részletesen foglalkozik a *Szoftvertechnológia* c. tárgy.

### AADL (Architecture Analysis & Design Language)

Az AADL eredetileg repülőipari célokra fejlesztett architektúraleíró nyelv.

### SysML (Systems Modeling Language)

A SysML egy UML-alapú általános modellezési nyelv rendszertervezési célokra. A SysML az UML egy részhalmazát bővíti ki és új diagramtípusokat is bevezet, pl. *Requirement Diagramot* követelmények és viszonyaik ábrázolására. 

### EMF (Eclipse Modeling Framework)

Az Eclipse fejlesztőkörnyezet [@eclipse] saját modellezési keretrendszerrel rendelkezik, ez az *Eclipse Modeling Framework (EMF)*. Az EMF metamodellező nyelve, az Ecore lehetővé teszi saját, ún. szakterület-specifikus nyelv (domain-specific language, DSL) definiálását. Az EMF mára több területen is *de facto* modellezési keretrendszer, sikere nagyban hozzájárul az Eclipse népszerűségéhez.

Az Eclipse-szel és az EMF-fel foglalkozik az *Eclipse-alapú technológiák* c. szabadon választható tárgy.

### AUTOSAR (AUTomotive Open System ARchitecture)

Az AUTOSAR [@autosar] nagy autóipari gyártók és beszállítóik által fejlesztett szabványos architektúranyelv, amely az egyes hardver- és szoftverkomponensek együttműködése magas szinten definiálható. Az AUTOSAR konzorciumnak a a Méréstechnika és Információs Rendszerek Tanszék is tagja [@autosar-attendees].

## Refaktoring

A dekompozícióhoz, azaz faktoringhoz szorosan kapcsolódik a *refaktoring* (refactoring) fogalma [@fowler2012refactoring]. Refaktoring során létező rendszerek, programkódok (vagy modellek) olyan átalakítását értjük, amelynek sorána megfigyelhető működés változatlan marad, de a kapott programkód (modell) olvashatóbb, érthetőbb, karbantarthatóbb lesz.

## Eszközök

Gráfok automatikus megjelenítésére alkalmas pl. a GraphViz [@graphviz] programcsomag. Gráfok feldolgozására gyakran alkalmazzák az igraph [@igraph] programcsomagot. Manapság több gráfadatbázis-kezelő rendszer is elterjedt, pl. a Neo4j [@neo4j] és a Titan [@titan] rendszerek.

Gráfok manuális rajzolására szintén több eszköz elterjedt. Egyszerűen használható online felületet biztosít a draw.io [@drawio] és az Arrow Tools [@arrowtool]. Komolyabb célokra a yEd [@yed] eszközt érdemes használni. Sok információt tartalmazó gráf esetén érdemes lehet vektorgrafikus rajzoló-, ill. prezentáló eszközök, pl. Microsoft Visio vagy Microsoft PowerPoint alkalmazása.

## Relációk tulajdonságai

A *tranzitív lezárás* fogalom megértését segítheti, ha ismerjük a relációkon értelmezett tulajdonságokat, köztük a *tranzitivitást*.

### Tranzitivitás

Egy $S$ halmazon értelmezett $r$ (kétváltozós) reláció *tranzitív*, ha bármely $a,b,c \in A$ esetén $r(a, b)$ és $r(b, c)$ teljesülése esetén $r(a, c)$ is teljesül.

~ RemoExample
* Az egyenlőség ($=$) és a kisebb ($<$) reláció *tranzitívak*, mert $a = b$ és $b = c$ esetén $a = c$, ill. $a < b$, $b < c$ esetén $a < c$.
* Az emberek közötti *őse* reláció *tranzitív*, mert ha *őse(a, b)* és *őse(b, c)*, akkor *őse(a, c)* is fennáll. 
* A nemegyenlő reláció ($\neq$) *nem tranzitív*, mert $a \neq b$ és $b \neq c$ esetén $a \neq c$ nem mindig áll fenn, pl. $1 \neq 2$ és $2 \neq 1$ esetén $1 \neq 1$ nem teljesül.
* Az emberek közötti *ismerőse* reláció *nem tranzitív*, mert *ismerőse(a, b)* és *ismerőse(b, c)* esetén nem garantált, hogy *ismerőse(a, c)* fennáll.
~

### További tulajdonságok

A Rendszermodellezés tárgynak nem témája, de érdemes megismerni a relációk további tulajdonságait: *reflexivitás*, *szimmetria*, *rendezés* stb. [@relaciok]. 

## Ontológia

Az *ontológia* egy nem egyértelmű nehezen definiálható kifejezés. Az informatikában általában az alábbihoz hasonló módon definiálják:

~ RemoDef
Az *ontológia* egy olyan taxonómia, amely tartalmazza a benne szereplő fogalmak közötti viszonyokat. 
~

# Ajánlott irodalom

A tulajdonsággráfokról egy jól érthető cikk Marko Rodriguez és Peter Neubauer munkája [@Rodriguez2010]. Rodriguez a Titan elosztott gráfadatbázis-kezelő rendszer fő fejlesztője [@Titan], míg Neubauer a Neo4j gráfadatbázis-kezelőt fejlesztő cég alapítója [@Neo4j]. Az elosztott gráfadatbázis alkalmazását, elméleti és gyakorlati kihívásait egy prezentáció is bemutatja [@RodriguezSlides2012].

Barabási-Albert László magyar fizikus nemzetközileg elismert kutatója a komplex hálózatok elméletének. Behálózva c. könyve közérthető stílusban mutatja be a hálózatok elemzésének elméleti kihívásait a kutatási eredmények gyakorlati jelentőségét [@behalozva]. A szerzővel több interjú is készült [@barabasi1; @barabasi2; @barabasi3].

Az osztályok és prototípusok közötti elvi különbséget mutatja be Antero Taivalsaari, a Nokia Research fejlesztőkének 1996-os cikke [@taivalsaari1996classes].

# Szótár

+-------------------------+----------------------+
| magyar kifejezés        | angol kifejezés      |
+-------------------------+----------------------+
| (de)kompozíció          | (de)composition      |
+-------------------------+----------------------+
| gráf                    | graph                |
| csomópont               | node, vertex         |
| él                      | edge, relationship   |
| címke                   | label                |
| gyökér                  | root                 |
| fa                      | tree                 |
| erdő                    | forest               |
| körmentes               | acyclic              |
| irányított              | directed             |
| irányítatlan            | undirected           |
| hipergráf               | hypergraph           |
+-------------------------+----------------------+
| reláció                 | relation             |
| jellemző, attribútum    | property, attribute  |
| vetítés, projekció      | projection           |
| szűrés, szelekció       | selection            |
| típus                   | type                 |
+-------------------------+----------------------+
| osztály                 | class                |
| objektum                | object               |
| referencia              | reference            |
| mező                    | field                |
| metódus                 | method               |
| példány                 | instance             |
| $a$ instance of $t$     | $a$ példánya $t$-nek |
| $t$ type of $c$         | $t$ típusa $c$-nek   |
| öröklés                 | inheritance          |
| alosztály, leszármazott | subtype, descendant  |
| ősosztály, ős           | supertype, ancestor  |
+-------------------------+----------------------+
| tranzitív               | transitive           |
| tranzitív lezárás       | transitive closure   |
+-------------------------+----------------------+
| taxonómia               | taxonomy             |
| ontológia               | ontology             |
+-------------------------+----------------------+

# Hivatkozások {-}

[BIB]
